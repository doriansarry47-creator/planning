#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ Pr√©paration du d√©ploiement Vercel...');

// V√©rifier que les fichiers n√©cessaires existent
const requiredFiles = [
  'package.json',
  'vercel.json',
  'vite.config.cjs',
  'api/index.ts'
];

let allFilesExist = true;

requiredFiles.forEach(file => {
  const filePath = path.resolve(__dirname, '..', file);
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå Fichier manquant: ${file}`);
    allFilesExist = false;
  } else {
    console.log(`‚úÖ ${file}`);
  }
});

// V√©rifier la structure client
const clientDir = path.resolve(__dirname, '..', 'client');
if (!fs.existsSync(clientDir)) {
  console.error('‚ùå R√©pertoire client/ manquant');
  allFilesExist = false;
} else {
  console.log('‚úÖ client/');
}

// V√©rifier les variables d'environnement n√©cessaires
const requiredEnvVars = ['JWT_SECRET', 'DATABASE_URL'];
const envFile = path.resolve(__dirname, '..', '.env.production');

if (fs.existsSync(envFile)) {
  console.log('‚úÖ .env.production trouv√©');
  
  const envContent = fs.readFileSync(envFile, 'utf8');
  requiredEnvVars.forEach(envVar => {
    if (envContent.includes(envVar)) {
      console.log(`‚úÖ ${envVar} configur√©`);
    } else {
      console.warn(`‚ö†Ô∏è  ${envVar} manquant dans .env.production`);
    }
  });
} else {
  console.warn('‚ö†Ô∏è  .env.production non trouv√©');
}

if (allFilesExist) {
  console.log('\nüéâ Tous les fichiers n√©cessaires sont pr√©sents!');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. V√©rifiez vos variables d\'environnement sur Vercel');
  console.log('2. Lancez: vercel --prod');
  console.log('3. Ou commitez et poussez vers votre repository GitHub connect√©');
} else {
  console.log('\n‚ùå Certains fichiers sont manquants. Veuillez les cr√©er avant de d√©ployer.');
  process.exit(1);
}